{"version":3,"sources":["components/card.js","components/hambuger-icon.js","components/header.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["Card","props","className","name","year","HamburgerIcon","Header","useState","lang","setLang","showSidebar","setShowSidebar","changeLanguage","language","languageChanged","title","join","onClick","App","useTranslation","t","i18n","a","Boolean","window","location","hostname","match","resources","en","translation","tr","use","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s3CASeA,EAPF,SAAAC,GAAK,OACd,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,yBAAyBD,EAAME,MAC9C,yBAAKD,UAAU,yBAAyBD,EAAMG,Q,OCKvCC,EARO,kBAClB,yBAAKH,UAAU,aACX,8BACA,8BACA,gCCFO,SAASI,EAAOL,GAAQ,IAAD,EACVM,mBAAS,MADC,mBAC3BC,EAD2B,KACrBC,EADqB,OAEIF,oBAAS,GAFb,mBAE3BG,EAF2B,KAEdC,EAFc,KAI5BC,EAAiB,SAAAC,GACnBJ,EAAQI,GACRZ,EAAMa,gBAAgBD,IAkB1B,OACI,4BAAQX,UAAU,UACd,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sBAAsBD,EAAMc,OAC3C,yBAAKb,UAAU,uBACX,4BACIA,UAAW,CAAC,CAAC,sBAAgC,OAATM,EAAgB,8BAAgC,IAAIQ,KAAK,MAC7FC,QAAS,kBAAML,EAAe,QAFlC,MAKA,4BACIV,UAAW,CAAC,CAAC,sBAAgC,OAATM,EAAgB,8BAAgC,IAAIQ,KAAK,MAC7FC,QAAS,kBAAML,EAAe,QAFlC,OAKJ,yBAAKV,UAAU,6BAA6Be,QAAS,kBAAMN,GAAgBD,KACvE,kBAAC,EAAD,QA9BZ,yBACIR,UAAW,CAAC,kBAAmBQ,EAAc,0BAA4B,4BAA4BM,KAAK,MAC1G,4BACId,UAAW,CAAC,CAAC,8BAAwC,OAATM,EAAgB,sCAAwC,IAAIQ,KAAK,MAC7GC,QAAS,kBAAML,EAAe,QAFlC,MAKA,4BACIV,UAAW,CAAC,CAAC,8BAAwC,OAATM,EAAgB,sCAAwC,IAAIQ,KAAK,MAC7GC,QAAS,kBAAML,EAAe,QAFlC,Q,MCiCGM,MA9Cf,WAAgB,IAAD,EACOC,cAAXC,EADI,EACJA,EAAGC,EADC,EACDA,KAEJT,EAAc,uCAAG,WAAMC,GAAN,SAAAS,EAAA,sEACbD,EAAKT,eAAeC,GADP,2CAAH,sDAIpB,OACI,yBAAKX,UAAU,OAEX,kBAACI,EAAD,CAAQS,MAAOK,EAAE,SAAUN,gBAAiBF,IAE5C,yBAAKV,UAAU,aACX,kBAAC,EAAD,CACIC,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,kBAEZ,kBAAC,EAAD,CACIjB,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,kBAEZ,kBAAC,EAAD,CACIjB,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,kBAEZ,kBAAC,EAAD,CACIjB,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,kBAEZ,kBAAC,EAAD,CACIjB,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,kBAEZ,kBAAC,EAAD,CACIjB,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,kBAEZ,kBAAC,EAAD,CACIjB,KAAMiB,EAAE,gBACRhB,KAAMgB,EAAE,qBCnCRG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCZAC,EAAY,CACdC,GAAI,CACAC,Y,OAEJC,GAAI,CACAD,Y,QAIRT,IAAKW,IAAIC,KACJC,KAAK,CACFN,YACAO,YAAa,KACbC,OAAO,EAEPC,cAAe,CACXC,aAAa,KAIVjB,EAAf,ECnBAkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cac15dc7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = props => (\r\n    <div className=\"container__card\">\r\n        <div className=\"container__card--name\">{props.name}</div>\r\n        <div className=\"container__card--year\">{props.year}</div>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst HamburgerIcon = () => (\r\n    <div className=\"hamburger\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n);\r\n\r\nexport default HamburgerIcon;\r\n","import React, { useState } from 'react';\r\n\r\nimport HamburgerIcon from \"./hambuger-icon\";\r\n\r\nexport default function Header(props) {\r\n    const [lang, setLang] = useState('en');\r\n    const [showSidebar, setShowSidebar] = useState(false);\r\n\r\n    const changeLanguage = language => {\r\n        setLang(language);\r\n        props.languageChanged(language);\r\n    };\r\n\r\n    const sidebar = () => (\r\n        <div\r\n            className={[\"header__sidebar\", showSidebar ? 'sidebar__animation-open' : 'sidebar__animation-close'].join(' ')}>\r\n            <button\r\n                className={[['header__sidebar-lang-button', lang === 'tr' ? 'header__sidebar-lang-button--active' : ''].join(' ')]}\r\n                onClick={() => changeLanguage('tr')}>\r\n                tr\r\n            </button>\r\n            <button\r\n                className={[['header__sidebar-lang-button', lang === 'en' ? 'header__sidebar-lang-button--active' : ''].join(' ')]}\r\n                onClick={() => changeLanguage('en')}>en\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav className=\"header__nav\">\r\n                <div className=\"header__nav--title\">{props.title}</div>\r\n                <div className=\"header__nav-buttons\">\r\n                    <button\r\n                        className={[['header__lang-button', lang === 'tr' ? 'header__lang-button--active' : ''].join(' ')]}\r\n                        onClick={() => changeLanguage('tr')}>\r\n                        tr\r\n                    </button>\r\n                    <button\r\n                        className={[['header__lang-button', lang === 'en' ? 'header__lang-button--active' : ''].join(' ')]}\r\n                        onClick={() => changeLanguage('en')}>en\r\n                    </button>\r\n                </div>\r\n                <div className=\"header__nav-sidebar-button\" onClick={() => setShowSidebar(!showSidebar)}>\r\n                    <HamburgerIcon/>\r\n                </div>\r\n            </nav>\r\n            {\r\n                sidebar()\r\n            }\r\n        </header>\r\n    );\r\n};\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from './components/card';\nimport Header from \"./components/header\";\n\nimport './index.css';\n\nfunction App() {\n    const {t, i18n} = useTranslation();\n\n    const changeLanguage = async language => {\n        await i18n.changeLanguage(language);\n    };\n\n    return (\n        <div className=\"App\">\n\n            <Header title={t('title')} languageChanged={changeLanguage}/>\n\n            <div className=\"container\">\n                <Card\n                    name={t('books.1.name')}\n                    year={t('books.1.year')}\n                />\n                <Card\n                    name={t('books.2.name')}\n                    year={t('books.2.year')}\n                />\n                <Card\n                    name={t('books.3.name')}\n                    year={t('books.3.year')}\n                />\n                <Card\n                    name={t('books.4.name')}\n                    year={t('books.4.year')}\n                />\n                <Card\n                    name={t('books.5.name')}\n                    year={t('books.5.year')}\n                />\n                <Card\n                    name={t('books.6.name')}\n                    year={t('books.6.year')}\n                />\n                <Card\n                    name={t('books.7.name')}\n                    year={t('books.7.year')}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport translationEn from './locales/en/translation.json'\r\nimport translationTr from './locales/tr/translation.json'\r\n\r\nconst resources = {\r\n    en: {\r\n        translation: translationEn\r\n    },\r\n    tr: {\r\n        translation: translationTr\r\n    }\r\n};\r\n\r\ni18n.use(initReactI18next)\r\n    .init({\r\n        resources,\r\n        fallbackLng: 'en',\r\n        debug: true,\r\n\r\n        interpolation: {\r\n            escapeValue: false,\r\n        }\r\n    });\r\n\r\nexport default i18n;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}